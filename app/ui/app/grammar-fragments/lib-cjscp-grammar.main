include('start.frag')

include('constraintset.frag')

constraint
  = _ "peephole-constraint" _ id:id _ "{" _ body:constraintBody _ "}" _ { return { type: 'peephole-constraint', id: id, constraintBody: body } }

constraintBody
  = after:after? before:before? rat:rationale cond:condition res:result { var obj = { dependencies: { before: before === '' ? [] : before, after: after === '' ? [] : after }, rationale : rat, condition: cond, result: res }; return obj }
  / after:after? before:before? rat:rationale cond:condition subs:constraintset { var obj = { dependencies: { before: before === '' ? [] : before, after: after === '' ? [] : after }, rationale : rat, condition: cond, constraints: subs }; return obj }

condition
  = "condition" _ "{" _ ex:expr _ "}" _ { return ex }

include('expr.frag')

include('term.frag')

include('rationale.frag')

result
  = "result" _ val:("FAIL_FINAL" / "PASS_FINAL" / "PASS" / "FAIL") { return val }

id
  = "last" { return 'last' }
  / "first" { return 'first' }
  / id:([a-zA-Z][a-zA-Z0-9-_]*) { if (id.length > 1) { return id[0]+id[1].join('') } else { return id } }

before
  = "before" _ ids:idseq _ { return ids }
after
  = "after" _ ids:idseq _ { return ids }

idseq
  = first:id ids:("," id)* { var tmp = [first];for (var i = 0; i < ids.length; i++) {if (i % 2 == 0) { tmp.push(ids[i][1])} }; return tmp }

include('whitespaces.frag')