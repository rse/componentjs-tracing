temporal-constraint unused-register {
    rationale {
        Register declared that is never used.
    }
    
    sequence {
        a << b << terminate
    }
    
    filter a {
        operation == 'register'
    }
    
    filter b {
        operation == 'call'
    }
    
    link {
        a.origin == b.origin
        && a.parameters.name == b.parameters.name
    }
}

temporal-constraint unused-subscribes {
    rationale {
        Register declared that is never used.
    }
    
    sequence {
        a << b << terminate
    }
    
    filter a {
        operation == 'subscribe'
    }
    
    filter b {
        operation == 'publish'
    }
    
    link {
        a.parameters.name == b.parameters.name
    }
}

temporal-constraint observe-value {
	rationale {
		Value expects an observe beforehand otherwise it would be useless.
	}

	sequence {
		a << b
	}

	filter a {
		operation == 'observe'
	}

	filter b {
		operation == 'value'
		&&  sourceType != 'M' 
		&&	parameters.value != undefined
	}

	link {
			a.parameters.name == b.parameters.name
		&&	isParent(a.origin, b.origin)
	}
}

temporal-constraint create-basic {
	rationale {
		The component needs to exist before we can interact with it.
	}

	sequence {
		a << b
	}

	filter a {
		operation == 'create'
	}

	filter b {
		operation != 'create'
	}

	link {
		b.origin == a.origin
	}
}

temporal-constraint spool-basic {
	rationale {
		There has to be a spool before one can unspool it.
	}

	sequence {
		a << b
	}

	filter a {
		operation == 'spool'
	}

	filter b {
			operation == 'unspool'
	}

	link {
			a.parameters.name == b.parameters.name
		&&	a.origin == b.origin
	}
}

temporal-constraint socket-basic {
	rationale {
		There has to be a socket before one can plug into it.
	}

	sequence {
		a << b
	}

	filter a {
		operation == 'socket'
	}

	filter b {
			operation == 'plug'
		||	operation == 'link'
	}

	link {
			a.parameters.name == b.parameters.name
		&&	isParent(a.origin, b.origin)
	}
}

temporal-constraint subscribe-basic {
	rationale {
		If there are no subscribes to an event, why fire it?
	}

	sequence {
		a << b
	}

	filter a {
		operation == 'subscribe'
	}

	filter b {
		operation == 'publish'
	}

	link {
			a.parameters.name == b.parameters.name
		&&	isParent(a.origin, b.origin)
	}
}

temporal-constraint model-basic {
	rationale {
		There has to be a model member that can be observed, set/get or touched.
	}

	sequence {
		a << b
	}

	filter a {
		operation == 'model'
	}

	filter b {
			operation == 'observe'
		||	operation == 'value'
		||  operation == 'touch'
	}

	link {
		contains(a.parameters.model, b.parameters.name)
		&&	isParent(a.origin, b.origin)
	}
}

temporal-constraint register-basic {
	rationale {
		A service has to be defined before it can be called.
	}

	sequence {
		a << b
	}

	filter a {
		operation == 'register'
	}

	filter b {
		operation == 'call'
	}

	link {
		a.origin == b.origin
	}
}